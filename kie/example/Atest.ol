from .A import A, AInterface
from .Test import Test,TestInterface
from console import Console
from reflection import Reflection
from string-utils import StringUtils
service ATest {

 embed Console as Console
 embed Reflection as Reflection
 embed StringUtils as StringUtils

 outputPort out {
  location: "local://testChan"
  interfaces: TestInterface
 }

 inputPort in {
  location: "local://testChan"
  aggregates: out
 }


// implementation of hooks
 courier in {
    [beforeAll(void)(void)]{
        //  preparation before begins
        // (1)
        println@Console( "beforeAll called" )()
    }
    [before(void)(void)]{
        //  preparation before begins each testCases
        // (2)
        println@Console( "before called" )()
    }
    [after(void)(void)]{
        //  teardown after each testCases
        // (3)
        println@Console( "after called" )()
    }
    [afterAll(void)(void)]{
        //  teardown after all testCases run
        // (4)
        println@Console( "afterAll called" )()
    }
 }

 // this line is required by jot to specify a Service to test
 embed A as Target

 init {
    testCases[0].name = "testcase1"
    testCases[0].op = "twice"
    testCases[0].request = 2 // request data
    testCases[0].expected = 4 // expectation
    testCases[0].expectedThrow = void  // expect to throws an error, optional?
    testCases[1].name = "testcase2"
    testCases[1].op = "twice"
    testCases[1].request = 0 // request data
    testCases[1].expected = 0 // expectation
    testCases[1].expectedThrow = void  // expect to throws an error, optional?
    testCases[2].name = "testcase3"
    testCases[2].op = "twice"
    testCases[2].request = "str" // request data
    testCases[2].expected = 0 // expectation
    testCases[2].expectedThrow = "InvocationFault"  // expect to throws an error, optional?
 }

// these lines are auto generated by jot

 main { 
    beforeAll@out()() 
    for( testCase in testCases ) {
        scope(test){
            install( default =>
                if (testCase.expectedThrow == void){
                    println@Console( testCase.name + " failed : got " + test.default + ", expected " + testCase.expected )()
                    // valueToPrettyString@StringUtils(test)(tc)
                    // println@Console(tc)()
                } else if (test.default == testCase.expectedThrow){
                    println@Console( testCase.name + ": pass :)" )()
                }
            )

            before@out()()
            invoke@Reflection({operation=testCase.op, outputPort="Target", data=testCase.request })(res)

            // need deep equality comparison
            if ( res == testCase.expected ){
                println@Console( testCase.name + ": pass :)" )()
            } else {
                println@Console( testCase.name + " failed : got " + res + ", expected " + testCase.expected )()
            }

            after@out()()
        }
    }

    afterAll@out()()
 }
}