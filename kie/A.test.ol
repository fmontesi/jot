from A import A, AInterface
from Testing import TestInterface // contains before()(), beforeAll()(), after()(), afterAll()(),  

service ATest {

 inputPort in {
  location: "local"
  interfaces: TestInterface
 }

 outputPort out {
  location: "local"
  interfaces: AInterface
 }


// implementation of hooks
 courier in {
    beforeAll()(){
        //  preparation before begins
        // (1)
    }
    before()(){
        //  preparation before begins each testCases
        // (2)
    }
    after()(){
        //  teardown after each testCases
        // (3)
    }
    afterAll()(){
        //  teardown after all testCases run
        // (4)
    }
 }

 // this line is required by jot to specify a Service to test
 embed A as Target

 init {
     // testCases should be strictly typed? 
     testCases << {
         .t1.name = "testcase1"
         .t1.op = "op1" // name of the operation
         .t1.request = {...} // request data
         .t1.expected = {...} // expectation
         .t1.expectedThrow = ErrorType  // expect to throws an error, optional?
         .t1.errorMsg = "print if error"
        //  ... t2, t3...
     }
 }

// these lines are auto generated by jot

//  main {
//     beforeAll@out()() 
//     for( testCase in testCases ) {
//         scope( test ){
//             install( default =>
//             //  check testCase.expectedThrow and throw if error 
//             )

//             before@out()()

//             testCase.[...].op@Target(testCase.[...].request)(res)

//             assert res against testCase.[...].expected
            
//             if fail
//                 println@Console( testCase.[...].errorMsg )()

//             after@out()()
//         }
//     }

//     afterAll@out()()
//  }
}