from main import CustomerCore, CustomerInformationHolder // should it be auto imported? via filename reference
from ..test.Testing import TestInterface // contains before()(), beforeAll()(), after()(), afterAll()(),  

from console import Console
from reflection import Reflection
from string-utils import StringUtils

service ServiceTest {

 embed Console as Console
 embed Reflection as Reflection
 embed StringUtils as StringUtils

 outputPort out {
//   location: "socket://localhost:5000"
//   protocol: http {
//     osc.createCustomer << {
//         template = "/customers"
//         method = "post"
//     }
//   }
  location: "local://testChan"
  interfaces: TestInterface
 }

 inputPort in {
  location: "local://testChan"
  aggregates: out
 }

// implementation of hooks
 courier in {
    [beforeAll(void)(void)]{
        //  preparation before begins
        // (1)
        println@Console( "beforeAll called" )()
    }
    [before(void)(void)]{
        //  preparation before begins each testCases
        // (2)
        println@Console( "before called" )()
    }
    [after(void)(void)]{
        //  teardown after each testCases
        // (3)
        println@Console( "after called" )()
    }
    [afterAll(void)(void)]{
        //  teardown after all testCases run
        // (4)
        println@Console( "afterAll called" )()
    }
 }

 // this line is required by jot to specify a Service to test
 embed CustomerCore({
    location = "socket://localhost:5000"
 })

 outputPort Target{
  location: "socket://localhost:5000"
  protocol: http {
    // this block is optional??
    osc.createCustomer << {
        template = "/customers"
        method = "post"
    }
  }
  interfaces: CustomerInformationHolder
 }

 init {
    testCases[0].name = "create customer"
    testCases[0].op = "createCustomer"
    testCases[0].resourcePath = "/customers"
    testCases[0].request << {
        firstName= "Max"
        lastName="Mustermann"
        birthday=16546
        streetAddress="Oberseestrasse 10"
        postalCode="8640"
        city="Rapperswil"
        email= "max@example.com"
        phoneNumber="055 222 41 11"
    }
    testCases[0].expected << {
        customerId = 123
        firstName= "Max"
        lastName="Mustermann"
        birthday=16546
        streetAddress="Oberseestrasse 10"
        postalCode="8640"
        city="Rapperswil"
        email= "max@example.com"
        phoneNumber="055 222 41 11"
        moveHistory=void
    }
    testCases[0].expectedThrow = void  // expect to throws an error, optional?
 }

// these lines are auto generated by jot

 main { 
    beforeAll@out()() 
    for( testCase in testCases ) {
        scope(test){
            install( default =>
                if (testCase.expectedThrow == void){
                    print@Console( testCase.name + " failed : expected " + testCase.expected )()

                    valueToPrettyString@StringUtils(test)(faultPretty)
                    println@Console("got " + faultPretty)()
                } else if (test.default == testCase.expectedThrow){
                    println@Console( testCase.name + ": pass :)" )()
                }
            )

            before@out()()

            invoke@Reflection({operation = testCase.op, outputPort = "Target", resourcePath = testCase.resourcePath, data -> testCase.request })(res)

            // need deep equality comparison
            if ( res.customerId == testCase.expected.customerId ){
                println@Console( testCase.name + ": pass :)" )()
            } else {
                println@Console( testCase.name + " failed : got " + res + ", expected " + testCase.expected )()
            }

            after@out()()
        }
    }

    afterAll@out()()
 }
}